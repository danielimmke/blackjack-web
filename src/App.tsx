import { useState } from 'react';
import './App.scss';

const suiteTypes = ['Diamonds', 'Hearts', 'Spades', 'Clubs'];

const cardTypes: { [key: string]: (string | number)[] } = {
  'TWO': ['2', 2],
  'THREE': ['3', 3],
  'FOUR': ['4', 4],
  'FIVE': ['5', 5],
  'SIX': ['6', 6],
  'SEVEN': ['7', 7],
  'EIGHT': ['8', 8],
  'NINE': ['9', 9],
  'TEN': ['10', 10],
  'JACK': ['J',10],
  'QUEEN': ['Q',10],
  'KING': ['K',10],
  'ACE': ['A', 11],
}

interface Card {
  value: string,
  suite: string
}

class Deck {
  list: Card[]

  constructor() {
    // Create deck of cards
    this.list = []

    for(let suite of suiteTypes) {
      for(let value in cardTypes) {
        const card: Card = {
          value,
          suite
        }

        this.list.push(card);
      }
    }
  }
}

// Fisher-Yates shuffle algorithm
const shuffle = (array: Card[]) => {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

class Shoe {
  list: Card[]

  constructor() {
    this.list = []

    for(let i = 0; i < 6; i++) {
      let deck = new Deck();
      this.list = this.list.concat(deck.list);
    }

    shuffle(this.list);
  }

  draw() {
    return this.list.pop();
  }
}

interface PlayingCardProps {
  card: Card
}

const HeartIcon = (props:any) => <path {...props} d="M75.8726555,174 C72.9907864,163.156089 68.8667325,152.933962 63.5004936,143.333619 C58.1342547,133.733276 47.8986509,118.885077 32.7936821,98.7890223 C21.6637052,84.0651801 14.757157,74.6638079 12.0740375,70.5849057 C7.80092136,64.1183533 4.72030273,58.1989708 2.83218164,52.8267581 C0.944060546,47.4545455 0,41.9828473 0,36.4116638 C0,26.0651801 3.4284304,17.4348199 10.2852912,10.5205832 C17.142152,3.60634648 25.6386969,0.14922813 35.774926,0.14922813 C45.8117802,0.14922813 54.5567621,3.73070326 62.0098717,10.8936535 C67.6742349,16.3653516 72.2951629,24.373928 75.8726555,34.9193825 C79.1520237,23.1801029 84.3443567,14.4253859 91.4496545,8.65523156 C98.5549523,2.88507719 106.430405,0 115.076012,0 C125.112866,0 133.609411,3.432247 140.565647,10.296741 C147.521882,17.161235 151,25.2692967 151,34.6209262 C151,43.077187 148.98766,51.7821612 144.962981,60.7358491 C140.938302,69.6895369 133.06285,81.5780446 121.336624,96.4013722 C106.231655,115.502573 95.5737085,130.549743 89.3627838,141.542882 C83.1518592,152.536021 78.6551497,163.35506 75.8726555,174 Z"/>
const SpadeIcon = (props:any) => <path {...props} d="M76.1563786,0 C78.866941,11.2298944 83.037037,21.264013 88.6666667,30.1023558 C94.2962963,38.9406986 104.33059,49.8846466 118.769547,62.9341998 C133.208505,75.983753 142.356653,86.0178716 146.213992,93.0365556 C150.071331,100.05524 152,107.151909 152,114.326564 C152,124.204712 148.663923,132.471162 141.99177,139.125914 C135.319616,145.780666 127.292181,149.108042 117.909465,149.108042 C101.646091,149.108042 88.3539095,139.229894 78.0329218,119.473599 C78.1371742,134.758733 80.1440329,146.898457 84.0534979,155.89277 C87.962963,164.887084 94.1920439,171.957758 102.740741,177.104793 C111.289438,182.251828 122.705075,185.293258 136.987654,186.229082 L138.082305,192 L14.2304527,192 L15.3251029,186.229082 C28.2524005,186.229082 39.2249657,183.629569 48.2427984,178.430544 C57.260631,173.231519 64.0891632,166.004874 68.7283951,156.750609 C73.3676269,147.496344 75.5308642,135.070674 75.218107,119.473599 C70.526749,129.351747 64.7146776,136.760357 57.781893,141.699431 C50.8491084,146.638505 43.0562414,149.108042 34.4032922,149.108042 C25.0205761,149.108042 16.9410151,145.728676 10.1646091,138.969943 C3.38820302,132.21121 0,124.204712 0,114.950447 C0,107.25589 1.66803841,100.341186 5.00411523,94.2063363 C9.69547325,85.5759545 17.8792867,76.5296507 29.5555556,67.0674249 C44.1508916,55.1096669 55.4622771,43.2038993 63.4897119,31.3501219 C69.3278464,22.71974 73.5500686,12.2696994 76.1563786,0 Z"/>
const DiamondIcon = (props:any) => <path {...props} d="M75.1688596,0 C84.9926901,16.5837931 97.5208333,34.9797226 112.753289,55.1877884 C127.985746,75.3958542 140.734649,91.155949 151,102.468073 C142.611111,111.144362 129.255117,127.728155 110.932018,152.219452 C95.9203216,172.207865 84.0544591,189.889923 75.3344298,205.265625 C72.4645468,199.774303 68.6564327,193.514195 63.9100877,186.485303 C55.5211988,174.074915 44.7039474,159.083605 31.4583333,141.511374 C28.1469298,137.118316 17.6608187,124.103882 0,102.468073 C11.1483918,89.8380317 25.3874269,71.9912345 42.7171053,48.9276811 C55.6315789,31.7947557 66.4488304,15.4855287 75.1688596,0 Z"/>
const ClubIcon = (props:any) => <path {...props} d="M127.579592,150.630204 L23.7902041,150.630204 L24.7763265,146.439184 C38.3355102,143.562993 47.2927891,140.76898 51.6481633,138.057143 C58.3044898,133.866122 63.7281633,127.682313 67.9191837,119.505714 C72.1102041,111.329116 74.2057143,102.762177 74.2057143,93.804898 C74.2057143,92.5722449 74.1235374,90.6821769 73.9591837,88.1346939 C69.1107483,98.1602721 63.0912925,105.515102 55.9008163,110.199184 C48.7103401,114.883265 41.4171429,117.225306 34.0212245,117.225306 C24.4887075,117.225306 16.4353741,113.917687 9.86122449,107.302449 C3.28707483,100.687211 0,92.5722449 0,82.957551 C0,73.5072109 3.02,65.5155102 9.06,58.982449 C15.1,52.4493878 21.9001361,49.1828571 29.4604082,49.1828571 C34.4731973,49.1828571 41.1706122,51.2783673 49.5526531,55.4693878 C46.1012245,49.8813605 43.8619048,45.6081633 42.8346939,42.6497959 C41.807483,39.6914286 41.2938776,36.527619 41.2938776,33.1583673 C41.2938776,23.872381 44.5193197,16.0244898 50.9702041,9.61469388 C57.4210884,3.20489796 65.494966,0 75.1918367,0 C84.8065306,0 92.8804082,3.22544218 99.4134694,9.67632653 C105.946531,16.1272109 109.213061,23.8312925 109.213061,32.7885714 C109.213061,40.0201361 106.419048,47.5804082 100.83102,55.4693878 C107.733878,52.2644898 111.842721,50.4565986 113.157551,50.0457143 C115.376327,49.3882993 117.882721,49.0595918 120.676735,49.0595918 C128.894422,49.0595918 136.002721,52.2644898 142.001633,58.6742857 C148.000544,65.0840816 151,73.0141497 151,82.4644898 C151,92.2435374 147.712925,100.461224 141.138776,107.117551 C134.564626,113.773878 126.634558,117.102041 117.348571,117.102041 C112.335782,117.102041 107.097007,115.869388 101.632245,113.404082 C96.167483,110.938776 91.4217687,107.610612 87.395102,103.419592 C84.5189116,100.461224 80.9853061,95.3662585 76.7942857,88.1346939 C77.1229932,101.118639 79.0952381,111.390748 82.7110204,118.95102 C86.3268027,126.511293 91.9148299,132.756735 99.475102,137.687347 C104.487891,140.974422 113.527347,143.891701 126.593469,146.439184 L127.579592,150.630204 Z" transform="translate(.088 .299)"/>

const iconDict: { [key: string]: any } = {
  Clubs: <ClubIcon />,
  Diamonds: <DiamondIcon />,
  Hearts: <HeartIcon />,
  Spades: <SpadeIcon />
}

const PlayingCard = (props:PlayingCardProps) => {
  const { value, suite } = props.card;
  console.log(props.card)
  let fillColor = ['Spades', 'Clubs'].includes(suite) ? '#000' : '#f00';
  let label = cardTypes[value][0];

  let Icon = () => iconDict[suite]

  let offsets: { [key:string] : number } = {
    TEN: -12,
    QUEEN: -3,
    KING: -3,
    ACE: 0
  }

  let xPos = offsets[value] ? offsets[value] : 3;

  return (
    <svg viewBox="0 0 500 750" className="playing-card">
      <rect width="500" height="750" fill="#FFF" />
      <g fill={fillColor}>
        <g transform="translate(48 18)">
          <g transform="translate(-5 110) scale(0.4)">
            <Icon />
          </g>
          <text fontFamily="Fraunces-SemiBold, Fraunces" fontSize="90" fontWeight="500">
            <tspan x={xPos} y={88}>{label}</tspan>
          </text>
        </g>
        <g transform="rotate(-180 224 354.5)">
          <g transform="translate(-5 110) scale(0.4)">
            <Icon />
          </g>
          <text fontFamily="Fraunces-SemiBold, Fraunces" fontSize="90" fontWeight="500">
            <tspan x={xPos} y={88}>{label}</tspan>
          </text>
        </g>
        <g transform="translate(175, 275)">
          <Icon />
        </g>
      </g>
    </svg>
  )
} 

function App() {
  const [shoe, setShoe] = useState<Shoe>(new Shoe());

  // Deal card

  // Hit
  const [players, setPlayers] = useState([])

  return (
    <div className="App">
      <header><h1>Blackjack</h1></header>
      <div className="card-list overlapping">
        <PlayingCard card={shoe.draw()!} />
        <PlayingCard card={shoe.draw()!} />
        <PlayingCard card={shoe.draw()!} />
      </div>
    </div>
  );
}

export default App;
